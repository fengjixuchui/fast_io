	bool const may_overflow{static_cast<unsigned_char_type>(static_cast<unsigned_char_type>(*e)-u8'0')<static_cast<unsigned_char_type>(10)};
	auto i{b};
	for(;i!=e&&static_cast<unsigned_char_type>(static_cast<unsigned_char_type>(*i)-u8'0')<static_cast<unsigned_char_type>(10);++i);
	unsigned_t t{};
	std::size_t const size(i-b);
	if constexpr(sizeof(T)==8)
	{
		switch(size)
		{
		case 20:
			if(u8'1'<*b)
				if constexpr(std::unsigned_integral<T>)
					throw std::overflow_error("unsigned overflow");
				else
					throw std::overflow_error("signed overflow");
			t=10000000000000000000ULL;
		case 19:t+=1000000000000000000ULL*(i[-19]-u8'0');
		case 18:t+=100000000000000000ULL*(i[-18]-u8'0');
		case 17:t+=10000000000000000ULL*(i[-17]-u8'0');
		case 16:t+=1000000000000000ULL*(i[-16]-u8'0');
		case 15:t+=100000000000000ULL*(i[-15]-u8'0');
		case 14:t+=10000000000000ULL*(i[-14]-u8'0');
		case 13:t+=1000000000000ULL*(i[-13]-u8'0');
		case 12:t+=100000000000ULL*(i[-12]-u8'0');
		case 11:t+=10000000000ULL*(i[-11]-u8'0');
		case 10:t+=1000000000ULL*(i[-10]-u8'0');
		case 9: t+=100000000U  *(i[-9]-u8'0');
		case 8: t+=10000000U  *(i[-8]-u8'0');
		case 7: t+=1000000U  *(i[-7]-u8'0');
		case 6: t+=100000U  *(i[-6]-u8'0');
		case 5: t+=10000U  *(i[-5]-u8'0');
		case 4: t+=1000U  *(i[-4]-u8'0');
		case 3: t+=100U  *(i[-3]-u8'0');
		case 2: t+=10U  *(i[-2]-u8'0');
		case 1: t+=    i[-1]-u8'0';
		}
	}
	else if constexpr(sizeof(T)==4)
	{
		switch(size)
		{
		case 10:
			if(u8'4'<*b)
				if constexpr(std::unsigned_integral<T>)
					throw std::overflow_error("unsigned overflow");
				else
					throw std::overflow_error("signed overflow");
			t=1000000000U  *(*b-u8'0');
		case 9: t+=100000000U  *(i[-9]-u8'0');
		case 8: t+=10000000U  *(i[-8]-u8'0');
		case 7: t+=1000000U  *(i[-7]-u8'0');
		case 6: t+=100000U  *(i[-6]-u8'0');
		case 5: t+=10000U  *(i[-5]-u8'0');
		case 4: t+=1000U  *(i[-4]-u8'0');
		case 3: t+=100U  *(i[-3]-u8'0');
		case 2: t+=10U  *(i[-2]-u8'0');
		case 1: t+=    i[-1]-u8'0';
		}
	}
	else if constexpr(sizeof(T)==2)
	{
		switch(size)
		{
		case 5:
			if(u8'6'<*b)
				if constexpr(std::unsigned_integral<T>)
					throw std::overflow_error("unsigned overflow");
				else
					throw std::overflow_error("signed overflow");
			t=10000U  *(*b-u8'0');
		case 4: t+=1000U  *(i[-4]-u8'0');
		case 3: t+=100U  *(i[-3]-u8'0');
		case 2: t+=10U  *(i[-2]-u8'0');
		case 1: t+=    i[-1]-u8'0';
		}
	}
	else if constexpr(sizeof(T)==1)
	{
		switch(size)
		{
		case 3:
			if(u8'2'<*b)
				if constexpr(std::unsigned_integral<T>)
					throw std::overflow_error("unsigned overflow");
				else
					throw std::overflow_error("signed overflow");
			t=100U  *(*b-u8'0');
		case 2: t+=10U  *(i[-2]-u8'0');
		case 1: t+=    i[-1]-u8'0';
		}
	}
	constexpr std::size_t max_size{get_max_size<T,10>()};
	if(size==max_size&&(may_overflow||t<10U))[[unlikely]]
	{
		if constexpr(std::unsigned_integral<T>)
			throw std::overflow_error("unsigned overflow");
		else
			throw std::overflow_error("signed overflow");
	}



static constexpr std::uint64_t pow10[]
{
10000000000000000000ULL,
1000000000000000000ULL,
100000000000000000ULL,
10000000000000000ULL,
1000000000000000ULL,
100000000000000LL,
10000000000000ULL,
1000000000000ULL,
100000000000ULL,
10000000000ULL,
1000000000ULL,
100000000ULL,
10000000ULL,
1000000ULL,
100000ULL,
10000ULL,
1000ULL,
100ULL,
10ULL,
1ULL};
	
static constexpr std::uint64_t pow10[]
{
10000000000000000000ULL,
1000000000000000000ULL,
100000000000000000ULL,
10000000000000000ULL,
1000000000000000ULL,
100000000000000LL,
10000000000000ULL,
1000000000000ULL,
100000000000ULL,
10000000000ULL,
1000000000ULL,
100000000ULL,
10000000ULL,
1000000ULL,
100000ULL,
10000ULL,
1000ULL,
100ULL,
10ULL,
1ULL};
template<std::integral T,std::integral ch_type>
requires (sizeof(T)==1||sizeof(T)==2||sizeof(T)==4||sizeof(T)==8)
inline constexpr T input_base_number_fast_path(ch_type*& b,ch_type* e)
{
	using unsigned_t = std::make_unsigned_t<std::remove_cvref_t<T>>;
	using unsigned_char_type = std::make_unsigned_t<ch_type>;
	std::size_t i(20-(e-b));
	T result{};
	for(;e-b>=4;b+=4)
	{
		unsigned_char_type const d0(static_cast<unsigned_char_type>(*b)-u8'0');
		if(9<d0)[[unlikely]]
			return result;
		auto s0{pow10[i]*d0};
		unsigned_char_type const d1(static_cast<unsigned_char_type>(b[1])-u8'0');
		if(9<d1)[[unlikely]]
		{
			++b;
			return result+s0;
		}
		auto s1{pow10[i+1]*d1};
		unsigned_char_type const d2(static_cast<unsigned_char_type>(b[2])-u8'0');
		if(9<d2)[[unlikely]]
		{
			b+=2;
			return result+s0+s1;
		}
		auto s2{pow10[i+2]*d2};
		unsigned_char_type const d3(static_cast<unsigned_char_type>(b[3])-u8'0');
		if(9<d3)[[unlikely]]
		{
			b+=3;
			return result+s0+s1+s2;
		}
		auto s3{pow10[i+3]*d3};
		result+=s0+s1+s2+s3;
		i+=4;
	}
	switch(e-b)
	{
	case 3:
	{
		unsigned_char_type const d0(static_cast<unsigned_char_type>(*b)-u8'0');
		if(9<d0)[[unlikely]]
			return result;
		auto s0{pow10[i]*d0};
		unsigned_char_type const d1(static_cast<unsigned_char_type>(b[1])-u8'0');
		if(9<d1)[[unlikely]]
		{
			++b;
			return result+s0;
		}
		auto s1{pow10[i+1]*d1};
		unsigned_char_type const d2(static_cast<unsigned_char_type>(b[2])-u8'0');
		if(9<d2)[[unlikely]]
		{
			b+=2;
			return result+s0+s1;
		}
		auto s2{pow10[i+2]*d2};
		result+=s0+s1+s2;
		break;
	}
	case 2:
	{
		unsigned_char_type const d0(static_cast<unsigned_char_type>(*b)-u8'0');
		if(9<d0)[[unlikely]]
			return result;
		auto s0{pow10[i]*d0};
		unsigned_char_type const d1(static_cast<unsigned_char_type>(b[1])-u8'0');
		if(9<d1)[[unlikely]]
		{
			++b;
			return result+s0;
		}
		auto s1{pow10[i+1]*d1};
		result+=s0+s1;
		break;
	}
	case 1:
	{
		unsigned_char_type const d0(static_cast<unsigned_char_type>(*b)-u8'0');
		if(9<d0)[[unlikely]]
			return result;
		result+=pow10[i]*d0;
		break;
	}
	}
	return result;
}


/*
template<std::integral T,std::integral ch_type>
requires (sizeof(T)==1||sizeof(T)==2||sizeof(T)==4||sizeof(T)==8)
inline constexpr T input_base_number_fast_path(ch_type*& b,ch_type* e)
{
	using unsigned_t = std::make_unsigned_t<std::remove_cvref_t<T>>;
	using unsigned_char_type = std::make_unsigned_t<ch_type>;
	bool const may_overflow{static_cast<unsigned_char_type>(static_cast<unsigned_char_type>(*e)-u8'0')<static_cast<unsigned_char_type>(10)};
	auto i{b};
	for(;i!=e&&static_cast<unsigned_char_type>(static_cast<unsigned_char_type>(*i)-u8'0')<static_cast<unsigned_char_type>(10);++i);
	unsigned_t t{};
	std::size_t const size(i-b);
	if constexpr(sizeof(T)==8)
	{
		switch(size)
		{
		case 20:
			if(u8'1'<*b)
				if constexpr(std::unsigned_integral<T>)
					throw std::overflow_error("unsigned overflow");
				else
					throw std::overflow_error("signed overflow");
			t=10000000000000000000ULL;
		case 19:t+=1000000000000000000ULL*(i[-19]-u8'0');
		case 18:t+=100000000000000000ULL*(i[-18]-u8'0');
		case 17:t+=10000000000000000ULL*(i[-17]-u8'0');
		case 16:t+=1000000000000000ULL*(i[-16]-u8'0');
		case 15:t+=100000000000000ULL*(i[-15]-u8'0');
		case 14:t+=10000000000000ULL*(i[-14]-u8'0');
		case 13:t+=1000000000000ULL*(i[-13]-u8'0');
		case 12:t+=100000000000ULL*(i[-12]-u8'0');
		case 11:t+=10000000000ULL*(i[-11]-u8'0');
		case 10:t+=1000000000ULL*(i[-10]-u8'0');
		case 9: t+=100000000U  *(i[-9]-u8'0');
		case 8: t+=10000000U  *(i[-8]-u8'0');
		case 7: t+=1000000U  *(i[-7]-u8'0');
		case 6: t+=100000U  *(i[-6]-u8'0');
		case 5: t+=10000U  *(i[-5]-u8'0');
		case 4: t+=1000U  *(i[-4]-u8'0');
		case 3: t+=100U  *(i[-3]-u8'0');
		case 2: t+=10U  *(i[-2]-u8'0');
		case 1: t+=    i[-1]-u8'0';
		}
	}
	else if constexpr(sizeof(T)==4)
	{
		switch(size)
		{
		case 10:
			if(u8'4'<*b)
				if constexpr(std::unsigned_integral<T>)
					throw std::overflow_error("unsigned overflow");
				else
					throw std::overflow_error("signed overflow");
			t=1000000000U  *(*b-u8'0');
		case 9: t+=100000000U  *(i[-9]-u8'0');
		case 8: t+=10000000U  *(i[-8]-u8'0');
		case 7: t+=1000000U  *(i[-7]-u8'0');
		case 6: t+=100000U  *(i[-6]-u8'0');
		case 5: t+=10000U  *(i[-5]-u8'0');
		case 4: t+=1000U  *(i[-4]-u8'0');
		case 3: t+=100U  *(i[-3]-u8'0');
		case 2: t+=10U  *(i[-2]-u8'0');
		case 1: t+=    i[-1]-u8'0';
		}
	}
	else if constexpr(sizeof(T)==2)
	{
		switch(size)
		{
		case 5:
			if(u8'6'<*b)
				if constexpr(std::unsigned_integral<T>)
					throw std::overflow_error("unsigned overflow");
				else
					throw std::overflow_error("signed overflow");
			t=10000U  *(*b-u8'0');
		case 4: t+=1000U  *(i[-4]-u8'0');
		case 3: t+=100U  *(i[-3]-u8'0');
		case 2: t+=10U  *(i[-2]-u8'0');
		case 1: t+=    i[-1]-u8'0';
		}
	}
	else if constexpr(sizeof(T)==1)
	{
		switch(size)
		{
		case 3:
			if(u8'2'<*b)
				if constexpr(std::unsigned_integral<T>)
					throw std::overflow_error("unsigned overflow");
				else
					throw std::overflow_error("signed overflow");
			t=100U  *(*b-u8'0');
		case 2: t+=10U  *(i[-2]-u8'0');
		case 1: t+=    i[-1]-u8'0';
		}
	}
	constexpr std::size_t max_size{get_max_size<T,10>()};
	if(size==max_size&&(may_overflow||t<10U))[[unlikely]]
	{
		if constexpr(std::unsigned_integral<T>)
			throw std::overflow_error("unsigned overflow");
		else
			throw std::overflow_error("signed overflow");
	}
	b=i;
	return t;
}
*/

/*
	if constexpr(base==10&&std::unsigned_integral<T>&&buffer_input_stream<input>)
	{
		if(!skip_until(in,[](auto ch)
		{
			return ch!=u8'0';
		}))[[unlikely]]
			return 0;
		constexpr std::size_t max_size{get_max_size<T,base>()+1};
		auto b{ibuffer_curr(in)};
		auto e{ibuffer_end(in)};
		if(max_size<e-b)[[likely]]
		{
			basic_istring_view<std::string_view> bisv(b,e);
			auto v{input_base_number<T,base,no_dec>(bisv)};
			ibuffer_set_curr(in,e-isize(bisv));
			return v;
		}
	}
*/